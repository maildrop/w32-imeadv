w32term.c の中に drain_message_queue があるのだけれども、

teminal->read_socket_hook が w32_read_socket で呼び出しをしている


ok 
w32proc.c L 2310行目 の ところ、
MsgWaitForMultipleObjects で 待ってるから、ウィンドウメッセージが届くと
w32term.c の drain_message_queue で メッセージの配送がなされる。

Lisp スレッドでウィンドウ作って、プロセス間通信できるぞ。
やったね。

（つまるところemacs の Windows 版のLispスレッドは、WindowsAPI の世界で言うところのGUIスレッドであり、
GUIスレッドとしての機能を考慮して作られている。）

サブクラス化
SetWindowSubClass でウィンドウのサブクラス化をするのだけれども、この関数はスレッドを超えることが出来ないので、
一旦 SetWindowHookEx で、UI スレッドに侵入して、そのフック関数の中で、SetWindowSubclass を実行してやる。
これは上手くいく

UI スレッドからのイベントの取得
UI スレッドからのメッセージは、Lisp スレッドの持つウィンドウが一旦受け取るのだけれども、
ここから Lisp コードを実行することが難しいので、さらに emacs-imm32-input-proxy.exe の持つウィンドウへ転送してやる。
そこで emacs-imm32-input-proxy.exe が標準出力へ出力。 この標準出力は、emacs 側が待っているので、フィルタ関数を
経由して、w32-imeadv--defualt-message-input-handlerをコールする。
いわゆる self-pipe-trick の利用である。

（ 他にもキーボードイベントへの侵入や、ウィンドウプロシージャからLisp_Object を作って実行などを考えたが、
Emacs本体側のコード変更に弱かったり、パッチ当てるのと変わらない苦労が考えられたので、結局この方法に落ち着いた）
 Emacs module に汎用的なイベントハンドラの仕組みを要求したい。一番近いのは、キーボードのスペシャルイベントであるが、
 これはハードコーディングされていて、増えたり減ったりはしない。ダメ。
 なお、mac用のスペシャルイベントのコードが、漏れている。使われないスペシャルイベント。

 emacs_envの実態は、スタック上にとられているので、呼び出し終わったら消えるよ。保存しておいてもだめだよ。

 なお、w32のファイル変更の通知などは、スレッドメッセージで届くので、ダイアログを開いている間は消失する。
これは信頼性がないのでリライトする必要があるだろうなと思った。

WindowMessageの同期処理
my_wait_message の処理が怪しかったので、Advanced Windows (原題 Windows Via C/C++) の正しい使い方にしてみた。
MsgWaitForMultipleObjectsEx で、MWMO_INPUTAVAILABLE フラグを使う方法


;; IME の開け閉めコード
(w32-imeadv-set-openstatus-open (string-to-number (frame-parameter (selected-frame)'window-id)) )
(w32-imeadv-set-openstatus-close (string-to-number (frame-parameter (selected-frame)'window-id)) )


再変換の時にリージョンの選択があるときにそれを使うようにしたい

;; defvar は スペシャルフォームなので、funcall で呼べない。
;; この問題を解決するために、一旦 read-from-string , car を使ってから、eval で評価する。

(eval (car (read-from-string (format "(defvar %s %S %S )" "my-symbol" t "description"))))

==========================================================================================================
PostMessage() WM_IME_STARTCOMPOSITION 連打問題

当該のコミットはこれ

git show c902b9205ba37aa2db7b9ee855fdca2a13e8076a

git show c902b9205ba
commit c902b9205ba37aa2db7b9ee855fdca2a13e8076a
Author: Jason Rumney <jasonr@gnu.org>
Date:   Wed Jul 22 16:03:39 2009 +0000

    * w32fns.c (w32_wnd_proc) [WM_IME_STARTCOMPOSITION]: Position
    IME window at cursor (Bug#2570).
    (w32_wnd_proc) [WM_IME_CHAR]: Release context when finished.
    (globals_of_w32fns): Dynamically load functions required above.
    
    * w32term.c (w32_draw_window_cursor): Send message to reposition
    any IME window.

これで言及されているバグレポートはこれ。

https://debbugs.gnu.org/cgi/bugreport.cgi?bug=2569
https://debbugs.gnu.org/cgi/bugreport.cgi?bug=2570

要するにカーソルの位置が変動したとき（主にインクリメンタルサーチ時）に、IMM Candidate Window を追従させて欲しいという意図なんだけど、
IMM32 は、 defWindowProc の先で、WM_IME_STARTCOMPOTIONを処理しているので（ DefWindowProc が呼ばれないときには Composition Window が表示されないのがその証左である。）WM_IME_STARTCOMPOSITIONをアプリケーションが発行することは意図されていないと思った方が安全。

さて、キャレットの位置は、WM_EMACS_TRACK_CARET でシステムキャレットに対応させていて、
これは、w32term.c の L6158 で PostMessage( hwnd, WM_EMACS_TRACK_CARET ,0 ,0 );
の呼び出しで決まる。
本来の意図としては、システムキャレットの位置に Composition Window を移動させたいわけなので、
WM_IME_STARTCOMPOTIONの発行を行うより、 WM_EMACS_TRACK_CARET で Composition Window の位置を調整する方が、理にかなっていると思う。

そもそも、w32_system_caret_x, w32_system_caret_y の二つは、 メモリバリア張ってないので、動作は未定義 
大体うまく動いているように見えるのは Windowning API が同期ポイントだからっていう話なんだけど、死ねば良いのに。

よって
 WM_IME_STARTCOMPOSITIONを Emacs 本体に渡さないようにする。
WM_EMACS_TRACK_CARET をフックして、emacs本体の処理後に、 Composition Window の位置を調整する方がよい
と結論づけた。

